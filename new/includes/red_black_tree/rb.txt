Red Black Trees 
    
Introduction 

- It is a self balancing Binary Search Tree (every node to the left is smaller and every node to the right is greater)
- Every node is either red or black 

- The root is always black 
- Every leaf node which is the nil nodes are always black 

- If a node is red then its children are black (No two adjacent red nodes) 
- Every path from every node to any of its descendents NIL has the same number of black nodes 

- The longest path (root to farthest NIL) is no more than twice the length of the shortest path (root to nearest nil)


Rotations on AVL 
- Height of left subtree - Height of right subtree  {-1 , 0 , 1}
- x y z - left rotation 
- z y x - right rotation
- x z y --> right rotation --> x y z --> left rotatiion 
- z x y --> left roatation --> z y x --> right rotation  


Insertions in Red Black Tree

-- If the tree is empty, create a newnode as root node with color black 
-- If the tree is not empty create a newnode with color red

-- If parent of newnode is black then exit
-- If parent of newnode is red, then check the color of parent's sibling (uncle) of new node
    --- if color is black or null then do suitable rotation and recolor
    --- if color is red then recolor and also check if parents parent (grandparent) of newnode is not root node then recolor it and recheck


Deletions in Red Black Tree 
- If we delete a red node no problem 
- If we delete a black node, we need to balance it 
    -- Internal Node will always preserve its color 
    --    

_______________________

1. transplant - helps us move subtrees within the tree 
    -- if u is root  -- root == value 
    -- if u is left_child = 
2. delete - deletes the actual node
3. delete_fixup - fixes any red_black violations 

____________________________

Step 1: Perform BST deletion 
Step 2: 
        case 1: if the node to be deleted is red just delete it 
                if the node to be deleted is black with one child in red, replace red with black and delete red 
                if the node is internal, we do not change the colour, we replace with leaf and if red delete leaf red 
        // The problem arises when you have double blacks  - Black node with black children 
        case 2: if root is double black, just remove double black 
        case 3: if Double blacks sibling is black and both its children are black 
                -> Remove Double Black 
                -> Add Black to the Parent(P)
                    -> If P is red; it becomes black 
                    -> if P is black it becomes double black 
                -> Make sibling red 
                -> if still Double black exists, apply other cases 
        case 4: if Double Blacks sibling is red 
                -> Swap colors of DB's parent and its sibling 
                -> Rotate Parent in DB direction 
                -> Reapply Cases 
        case 5: if Double Black's sibling is black, siblings child who is far from Double Black is black, 
                but near child to Double Black is red  
                -> swap color of DB's sibling and siblings child who is near to DB
                -> rotate sibling in opposite direction to DB 
                -> apply case 6
        case 6: Double Black sibling is black , far child is red 
                -> Swap color of Parent and sibling 
                -> Rotate parent in DB's direction
                -> remove DB 
                -> change color of red child to black 
        

